'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _interopRequireDefault = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _estraverse = require('estraverse');

var _estraverse2 = _interopRequireDefault(_estraverse);

var _esutils = require('esutils/lib/ast.js');

var _esutils2 = _interopRequireDefault(_esutils);

var _TemplateLiteral = require('./../syntax/template-literal.js');

var _TemplateLiteral2 = _interopRequireDefault(_TemplateLiteral);

var _typeChecker = require('./../utils/type-checker.js');

var _typeChecker2 = _interopRequireDefault(_typeChecker);

var _import = require('lodash');

var _import2 = _interopRequireDefault(_import);

exports['default'] = function (ast) {
  _estraverse2['default'].replace(ast, {
    enter: traverser
  });
};

var operands = undefined,
    hasString = undefined,
    hasExpression = undefined,
    currentExpression = undefined;

function traverser(node) {
  if (node.type === 'BinaryExpression' && node.operator === '+') {

    operands = [];
    hasString = false;
    currentExpression = node;

    _estraverse2['default'].traverse(node, {
      enter: detector
    });

    if (hasString) {
      operands = _import2['default'](operands).reverse().value();

      var templateString = new _TemplateLiteral2['default']();
      templateString.createFromArray(operands);
      this.skip();
      return templateString;
    }
  }
}

function detector(node) {

  if (_typeChecker2['default'].isBinaryExpression(node)) {
    if (node.operator === '+') {
      var left = node.left;
      var right = node.right;

      addOperand(right);

      if (!_typeChecker2['default'].isBinaryExpression(left)) {
        addOperand(left);

        this.skip();
      }
    } else {
      addOperand(node);
      this.skip();
    }
  }
}

function addOperand(node) {

  if (operands.indexOf(node) === -1) {
    if (_typeChecker2['default'].isString(node)) {
      hasString = true;
    }

    if (_esutils2['default'].isExpression(node) && !_typeChecker2['default'].isLiteral(node)) {
      hasExpression = true;
    }

    operands.push(node);
  }
}
module.exports = exports['default'];